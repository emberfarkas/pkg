// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package rabbitmq

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUnkown(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_UNKOWN.String() && e.Code == 500
}

func ErrorUnkown(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_UNKOWN.String(), fmt.Sprintf(format, args...))
}

// 断链接了
func IsDisconnect(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_DISCONNECT.String() && e.Code == 500
}

// 断链接了
func ErrorDisconnect(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_DISCONNECT.String(), fmt.Sprintf(format, args...))
}

// channel 断了
func IsChannelClosed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CHANNEL_CLOSED.String() && e.Code == 500
}

// channel 断了
func ErrorChannelClosed(format string, args ...interface{}) *errors.Error {
	return errors.New(500, ErrorReason_CHANNEL_CLOSED.String(), fmt.Sprintf(format, args...))
}
