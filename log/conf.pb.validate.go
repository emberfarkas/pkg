// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: log/conf.proto

package log

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on StdoutConf with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StdoutConf) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StdoutConf with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StdoutConfMultiError, or
// nil if none found.
func (m *StdoutConf) ValidateAll() error {
	return m.validate(true)
}

func (m *StdoutConf) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Level

	if len(errors) > 0 {
		return StdoutConfMultiError(errors)
	}

	return nil
}

// StdoutConfMultiError is an error wrapping multiple validation errors
// returned by StdoutConf.ValidateAll() if the designated constraints aren't met.
type StdoutConfMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StdoutConfMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StdoutConfMultiError) AllErrors() []error { return m }

// StdoutConfValidationError is the validation error returned by
// StdoutConf.Validate if the designated constraints aren't met.
type StdoutConfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StdoutConfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StdoutConfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StdoutConfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StdoutConfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StdoutConfValidationError) ErrorName() string { return "StdoutConfValidationError" }

// Error satisfies the builtin error interface
func (e StdoutConfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStdoutConf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StdoutConfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StdoutConfValidationError{}

// Validate checks the field values on FileConf with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FileConf) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FileConf with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FileConfMultiError, or nil
// if none found.
func (m *FileConf) ValidateAll() error {
	return m.validate(true)
}

func (m *FileConf) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Level

	// no validation rules for Path

	// no validation rules for Name

	if len(errors) > 0 {
		return FileConfMultiError(errors)
	}

	return nil
}

// FileConfMultiError is an error wrapping multiple validation errors returned
// by FileConf.ValidateAll() if the designated constraints aren't met.
type FileConfMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FileConfMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FileConfMultiError) AllErrors() []error { return m }

// FileConfValidationError is the validation error returned by
// FileConf.Validate if the designated constraints aren't met.
type FileConfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileConfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileConfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileConfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileConfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileConfValidationError) ErrorName() string { return "FileConfValidationError" }

// Error satisfies the builtin error interface
func (e FileConfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFileConf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileConfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileConfValidationError{}

// Validate checks the field values on FluentConf with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FluentConf) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FluentConf with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FluentConfMultiError, or
// nil if none found.
func (m *FluentConf) ValidateAll() error {
	return m.validate(true)
}

func (m *FluentConf) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Level

	// no validation rules for Addr

	if len(errors) > 0 {
		return FluentConfMultiError(errors)
	}

	return nil
}

// FluentConfMultiError is an error wrapping multiple validation errors
// returned by FluentConf.ValidateAll() if the designated constraints aren't met.
type FluentConfMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FluentConfMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FluentConfMultiError) AllErrors() []error { return m }

// FluentConfValidationError is the validation error returned by
// FluentConf.Validate if the designated constraints aren't met.
type FluentConfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FluentConfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FluentConfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FluentConfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FluentConfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FluentConfValidationError) ErrorName() string { return "FluentConfValidationError" }

// Error satisfies the builtin error interface
func (e FluentConfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFluentConf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FluentConfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FluentConfValidationError{}

// Validate checks the field values on Conf with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Conf) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Conf with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConfMultiError, or nil if none found.
func (m *Conf) ValidateAll() error {
	return m.validate(true)
}

func (m *Conf) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetConsole()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfValidationError{
					field:  "Console",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfValidationError{
					field:  "Console",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetConsole()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfValidationError{
				field:  "Console",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFile()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfValidationError{
					field:  "File",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfValidationError{
				field:  "File",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFluent()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfValidationError{
					field:  "Fluent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfValidationError{
					field:  "Fluent",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFluent()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfValidationError{
				field:  "Fluent",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfMultiError(errors)
	}

	return nil
}

// ConfMultiError is an error wrapping multiple validation errors returned by
// Conf.ValidateAll() if the designated constraints aren't met.
type ConfMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfMultiError) AllErrors() []error { return m }

// ConfValidationError is the validation error returned by Conf.Validate if the
// designated constraints aren't met.
type ConfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfValidationError) ErrorName() string { return "ConfValidationError" }

// Error satisfies the builtin error interface
func (e ConfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfValidationError{}
