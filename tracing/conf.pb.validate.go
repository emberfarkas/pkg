// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tracing/conf.proto

package tracing

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Jaeger with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Jaeger) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Jaeger with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in JaegerMultiError, or nil if none found.
func (m *Jaeger) ValidateAll() error {
	return m.validate(true)
}

func (m *Jaeger) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Endpoint

	// no validation rules for Metrics

	// no validation rules for Traces

	if len(errors) > 0 {
		return JaegerMultiError(errors)
	}

	return nil
}

// JaegerMultiError is an error wrapping multiple validation errors returned by
// Jaeger.ValidateAll() if the designated constraints aren't met.
type JaegerMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JaegerMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JaegerMultiError) AllErrors() []error { return m }

// JaegerValidationError is the validation error returned by Jaeger.Validate if
// the designated constraints aren't met.
type JaegerValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JaegerValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JaegerValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JaegerValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JaegerValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JaegerValidationError) ErrorName() string { return "JaegerValidationError" }

// Error satisfies the builtin error interface
func (e JaegerValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJaeger.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JaegerValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JaegerValidationError{}

// Validate checks the field values on Stdout with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Stdout) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Stdout with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in StdoutMultiError, or nil if none found.
func (m *Stdout) ValidateAll() error {
	return m.validate(true)
}

func (m *Stdout) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Traces

	// no validation rules for TraceOutput

	// no validation rules for Metrics

	// no validation rules for MetricOutput

	if len(errors) > 0 {
		return StdoutMultiError(errors)
	}

	return nil
}

// StdoutMultiError is an error wrapping multiple validation errors returned by
// Stdout.ValidateAll() if the designated constraints aren't met.
type StdoutMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StdoutMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StdoutMultiError) AllErrors() []error { return m }

// StdoutValidationError is the validation error returned by Stdout.Validate if
// the designated constraints aren't met.
type StdoutValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StdoutValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StdoutValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StdoutValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StdoutValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StdoutValidationError) ErrorName() string { return "StdoutValidationError" }

// Error satisfies the builtin error interface
func (e StdoutValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStdout.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StdoutValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StdoutValidationError{}

// Validate checks the field values on Otlp with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Otlp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Otlp with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OtlpMultiError, or nil if none found.
func (m *Otlp) ValidateAll() error {
	return m.validate(true)
}

func (m *Otlp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Endpoint

	// no validation rules for Metrics

	// no validation rules for Traces

	if len(errors) > 0 {
		return OtlpMultiError(errors)
	}

	return nil
}

// OtlpMultiError is an error wrapping multiple validation errors returned by
// Otlp.ValidateAll() if the designated constraints aren't met.
type OtlpMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OtlpMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OtlpMultiError) AllErrors() []error { return m }

// OtlpValidationError is the validation error returned by Otlp.Validate if the
// designated constraints aren't met.
type OtlpValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OtlpValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OtlpValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OtlpValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OtlpValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OtlpValidationError) ErrorName() string { return "OtlpValidationError" }

// Error satisfies the builtin error interface
func (e OtlpValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOtlp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OtlpValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OtlpValidationError{}

// Validate checks the field values on Prometheus with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Prometheus) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Prometheus with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PrometheusMultiError, or
// nil if none found.
func (m *Prometheus) ValidateAll() error {
	return m.validate(true)
}

func (m *Prometheus) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Enable

	// no validation rules for Metrics

	if len(errors) > 0 {
		return PrometheusMultiError(errors)
	}

	return nil
}

// PrometheusMultiError is an error wrapping multiple validation errors
// returned by Prometheus.ValidateAll() if the designated constraints aren't met.
type PrometheusMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PrometheusMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PrometheusMultiError) AllErrors() []error { return m }

// PrometheusValidationError is the validation error returned by
// Prometheus.Validate if the designated constraints aren't met.
type PrometheusValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PrometheusValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PrometheusValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PrometheusValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PrometheusValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PrometheusValidationError) ErrorName() string { return "PrometheusValidationError" }

// Error satisfies the builtin error interface
func (e PrometheusValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPrometheus.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PrometheusValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PrometheusValidationError{}

// Validate checks the field values on Conf with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Conf) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Conf with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ConfMultiError, or nil if none found.
func (m *Conf) ValidateAll() error {
	return m.validate(true)
}

func (m *Conf) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetJaeger()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfValidationError{
					field:  "Jaeger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfValidationError{
					field:  "Jaeger",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetJaeger()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfValidationError{
				field:  "Jaeger",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStdout()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfValidationError{
					field:  "Stdout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfValidationError{
					field:  "Stdout",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStdout()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfValidationError{
				field:  "Stdout",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOtlp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfValidationError{
					field:  "Otlp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfValidationError{
					field:  "Otlp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOtlp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfValidationError{
				field:  "Otlp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProm()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ConfValidationError{
					field:  "Prom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ConfValidationError{
					field:  "Prom",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProm()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConfValidationError{
				field:  "Prom",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ConfMultiError(errors)
	}

	return nil
}

// ConfMultiError is an error wrapping multiple validation errors returned by
// Conf.ValidateAll() if the designated constraints aren't met.
type ConfMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConfMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConfMultiError) AllErrors() []error { return m }

// ConfValidationError is the validation error returned by Conf.Validate if the
// designated constraints aren't met.
type ConfValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConfValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConfValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConfValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConfValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConfValidationError) ErrorName() string { return "ConfValidationError" }

// Error satisfies the builtin error interface
func (e ConfValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConf.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConfValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConfValidationError{}
