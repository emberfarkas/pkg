// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/sys/sys.proto

package sys

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AuthRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthRequestMultiError, or
// nil if none found.
func (m *AuthRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetAccessToken()) < 1 {
		err := AuthRequestValidationError{
			field:  "AccessToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AuthRequestMultiError(errors)
	}

	return nil
}

// AuthRequestMultiError is an error wrapping multiple validation errors
// returned by AuthRequest.ValidateAll() if the designated constraints aren't met.
type AuthRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthRequestMultiError) AllErrors() []error { return m }

// AuthRequestValidationError is the validation error returned by
// AuthRequest.Validate if the designated constraints aren't met.
type AuthRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthRequestValidationError) ErrorName() string { return "AuthRequestValidationError" }

// Error satisfies the builtin error interface
func (e AuthRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthRequestValidationError{}

// Validate checks the field values on AuthResp with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AuthResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AuthResp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AuthRespMultiError, or nil
// if none found.
func (m *AuthResp) ValidateAll() error {
	return m.validate(true)
}

func (m *AuthResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DataScope

	// no validation rules for UserId

	// no validation rules for RoleId

	// no validation rules for RoleKey

	if len(errors) > 0 {
		return AuthRespMultiError(errors)
	}

	return nil
}

// AuthRespMultiError is an error wrapping multiple validation errors returned
// by AuthResp.ValidateAll() if the designated constraints aren't met.
type AuthRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthRespMultiError) AllErrors() []error { return m }

// AuthRespValidationError is the validation error returned by
// AuthResp.Validate if the designated constraints aren't met.
type AuthRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthRespValidationError) ErrorName() string { return "AuthRespValidationError" }

// Error satisfies the builtin error interface
func (e AuthRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthRespValidationError{}

// Validate checks the field values on CheckResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckResourceRequestMultiError, or nil if none found.
func (m *CheckResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetPath()) < 2 {
		err := CheckResourceRequestValidationError{
			field:  "Path",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetMethod()) < 2 {
		err := CheckResourceRequestValidationError{
			field:  "Method",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CheckResourceRequestMultiError(errors)
	}

	return nil
}

// CheckResourceRequestMultiError is an error wrapping multiple validation
// errors returned by CheckResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResourceRequestMultiError) AllErrors() []error { return m }

// CheckResourceRequestValidationError is the validation error returned by
// CheckResourceRequest.Validate if the designated constraints aren't met.
type CheckResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResourceRequestValidationError) ErrorName() string {
	return "CheckResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResourceRequestValidationError{}

// Validate checks the field values on CheckResourceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckResourceReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckResourceReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckResourceReplyMultiError, or nil if none found.
func (m *CheckResourceReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckResourceReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	if len(errors) > 0 {
		return CheckResourceReplyMultiError(errors)
	}

	return nil
}

// CheckResourceReplyMultiError is an error wrapping multiple validation errors
// returned by CheckResourceReply.ValidateAll() if the designated constraints
// aren't met.
type CheckResourceReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckResourceReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckResourceReplyMultiError) AllErrors() []error { return m }

// CheckResourceReplyValidationError is the validation error returned by
// CheckResourceReply.Validate if the designated constraints aren't met.
type CheckResourceReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckResourceReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckResourceReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckResourceReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckResourceReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckResourceReplyValidationError) ErrorName() string {
	return "CheckResourceReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CheckResourceReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckResourceReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckResourceReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckResourceReplyValidationError{}

// Validate checks the field values on CheckRoleLevelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckRoleLevelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckRoleLevelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckRoleLevelRequestMultiError, or nil if none found.
func (m *CheckRoleLevelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckRoleLevelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RoleId

	// no validation rules for Target

	if len(errors) > 0 {
		return CheckRoleLevelRequestMultiError(errors)
	}

	return nil
}

// CheckRoleLevelRequestMultiError is an error wrapping multiple validation
// errors returned by CheckRoleLevelRequest.ValidateAll() if the designated
// constraints aren't met.
type CheckRoleLevelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckRoleLevelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckRoleLevelRequestMultiError) AllErrors() []error { return m }

// CheckRoleLevelRequestValidationError is the validation error returned by
// CheckRoleLevelRequest.Validate if the designated constraints aren't met.
type CheckRoleLevelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckRoleLevelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckRoleLevelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckRoleLevelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckRoleLevelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckRoleLevelRequestValidationError) ErrorName() string {
	return "CheckRoleLevelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckRoleLevelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckRoleLevelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckRoleLevelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckRoleLevelRequestValidationError{}

// Validate checks the field values on CheckRoleLevelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckRoleLevelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckRoleLevelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckRoleLevelReplyMultiError, or nil if none found.
func (m *CheckRoleLevelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckRoleLevelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckRoleLevelReplyMultiError(errors)
	}

	return nil
}

// CheckRoleLevelReplyMultiError is an error wrapping multiple validation
// errors returned by CheckRoleLevelReply.ValidateAll() if the designated
// constraints aren't met.
type CheckRoleLevelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckRoleLevelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckRoleLevelReplyMultiError) AllErrors() []error { return m }

// CheckRoleLevelReplyValidationError is the validation error returned by
// CheckRoleLevelReply.Validate if the designated constraints aren't met.
type CheckRoleLevelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckRoleLevelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckRoleLevelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckRoleLevelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckRoleLevelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckRoleLevelReplyValidationError) ErrorName() string {
	return "CheckRoleLevelReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CheckRoleLevelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckRoleLevelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckRoleLevelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckRoleLevelReplyValidationError{}
